# task type, support train and predict
task = train

# application type, support following application
# regression , regression task
# binary , binary classification task
# lambdarank , LambdaRank task
# alias: application, app
objective = binary

# eval metrics, support multi metric, delimited by ',' , support following metrics
# l1 
# l2 , default metric for regression
# ndcg , default metric for lambdarank
# auc 
# binary_logloss , default metric for binary
# binary_error
metric = binary_error

# column in data to use as label
label_column = 0

# number of bins for feature bucket, 255 is a recommend setting, it can save memories, and also has good accuracy. 
max_bin = 255

# training data
# if existing weight file, should name to "binary.train.weight"
# alias: train_data, train
#data = ./datasets/webspam/dataset/training_set_normalized.csv

# validation data, support multi validation data, separated by ','
# if existing weight file, should name to "binary.test.weight"
# alias: valid, test, test_data, 
#valid_data = 

# number of trees(iterations), alias: num_tree, num_iteration, num_iterations, num_round, num_rounds
#num_trees = 100

# shrinkage rate , alias: shrinkage_rate
learning_rate = 0.1

# number of leaves for one tree, alias: num_leaf
#num_leaves = 16
#max_depth = 4

# type of tree learner, support following types:
# serial , single machine version
# feature , use feature parallel to train
# data , use data parallel to train
# voting , use voting based parallel to train
# alias: tree
tree_learner = serial

# output model file
#output_model = LightGBM_model.txt

#seed = 1 #WEBSPAM: 3 pi√π corto, 1 e 7 simili, 5 arriva a 100

#k = -0.0002

p = inf

num_threads = 1

use_missing = false

#min_data_in_leaf = 350 #Per evitare di avere 0 istanze in un nodo.